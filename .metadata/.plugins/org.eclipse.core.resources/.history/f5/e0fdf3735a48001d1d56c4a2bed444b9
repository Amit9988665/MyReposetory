package com.in2it.service;

import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.verify;

import org.junit.Before;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import com.in2it.custumexception.UserCustumException;
import com.in2it.model.Employee;
import com.in2it.repository.EmployeeRepo;

@ExtendWith(MockitoExtension.class)
class EmployeeServiceTest {
	
	@Mock
	EmployeeRepo employeeRepo;

	@InjectMocks
	EmployeeService employeeService;

	@Before
	public void init() {
		MockitoAnnotations.openMocks(this);
	}
	
	 private Employee employee;

	    @BeforeEach
	    public void setup(){
	        //employeeRepository = Mockito.mock(EmployeeRepository.class);
	        //employeeService = new EmployeeServiceImpl(employeeRepository);
	        employee = Employee.builder()
	                .eid(1)
	                .empName("Amit")
	                .empAddress("Noida")
	                .empUserName("amitkr")
	                .empSalary("2000")
	                .empPassword("admin")
	                .build();
	    }

	    @DisplayName("JUnit test for saveEmployee method")
	    @Test
	    public void givenEmployeeObject_whenSaveEmployee_thenReturnEmployeeObject(){
	        // given - precondition or setup
//	        given(employeeRepo.findByEmail(employee.getEmpUserName()))
//	                .willReturn(Optional.empty());

	        given(employeeRepe.save(employee)).willReturn(employee);

	        System.out.println(employeeRepository);
	        System.out.println(employeeService);

	        // when -  action or the behaviour that we are going test
	        Employee savedEmployee = employeeService.saveEmployee(employee);

	        System.out.println(savedEmployee);
	        // then - verify the output
	        assertThat(savedEmployee).isNotNull();
	    }
	
	
	@Test
	void getByEmpId() throws UserCustumException {
		Employee employee = new Employee();
		employee.setEid(1);
		employee.setEmpName("Amit Kumar");
		employee.setEmpAddress("Grater Noida");
		employee.setEmpSalary("1000");
		employee.setEmpPassword("admin");
		employee.setEmpUserName("amit");

		System.out.println(employee);

		Employee employee2 = employeeService.getByEmpId(1);
		 
	}

	@Test
	void getAllEmp() {
		employeeService.getAllEmp();
		verify(employeeRepo).findAll();
	}
	 
}
